<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />


  <style>
    body { min-height: 100vh; display: flex; background-color: #f8f9fa; }
    .sidebar { width: 250px; background: #212529; color: #fff; transition: all 0.3s; }
    .sidebar .nav-link { color: #ddd; border-radius: 5px; margin-bottom: 5px; }
    .sidebar .nav-link.active { background: #0d6efd; color: #fff; font-weight: bold; }
    .sidebar .nav-link:hover:not(.active) { background: #343a40; }
    .content { flex: 1; padding: 20px; transition: all 0.3s; }
    img.thumb { border-radius: 6px; object-fit: cover; }
    
    /* Responsive adjustments */
    @media (max-width: 992px) {
      .sidebar { width: 80px; }
      .sidebar .nav-link span { display: none; }
      .sidebar h4 { font-size: 0; }
      .sidebar h4:after { content: "‚öôÔ∏è"; font-size: 1.5rem; }
      .content { margin-left: 0; }
    }
    
    @media (max-width: 768px) {
      .sidebar { width: 0; overflow: hidden; position: fixed; z-index: 1000; height: 100%; }
      .content { width: 100%; margin-left: 0 !important; }
      .sidebar.show { width: 250px; }
      .menu-toggle { display: block !important; }
    }
    
    /* Leaderboard glow styles */
    .leaderboard-table tbody tr { transition: all 0.3s ease; }
    .leaderboard-table tbody tr:hover { background: rgba(0,255,0,0.1); transform: scale(1.02); }
    .glow-gold   { background: rgba(255,215,0,0.15) !important; box-shadow: 0 0 20px rgba(255,215,0,0.9); font-weight: bold; }
    .glow-silver { background: rgba(192,192,192,0.15) !important; box-shadow: 0 0 20px rgba(192,192,192,0.9); font-weight: bold; }
    .glow-bronze { background: rgba(205,127,50,0.15) !important; box-shadow: 0 0 20px rgba(205,127,50,0.9); font-weight: bold; }

    /* Bookings table glow effects */
    #bookingsTable tbody tr { transition: all 0.3s ease; }
    #bookingsTable tbody tr.new-booking { background: rgba(0,255,255,0.15); box-shadow: 0 0 15px rgba(0,255,255,0.6); transform: scale(1.02); animation: fadeHighlight 3s forwards; }
    #bookingsTable tbody tr.updated { background: rgba(255,255,0,0.15); box-shadow: 0 0 15px rgba(255,255,0,0.6); transform: scale(1.02); animation: fadeUpdate 3s forwards; }
    @keyframes fadeHighlight { to { background: transparent; box-shadow: none; transform: none; } }
    @keyframes fadeUpdate { to { background: transparent; box-shadow: none; transform: none; } }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar { width: 8px; }
    ::-webkit-scrollbar-track { background: #f1f1f1; }
    ::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #555; }
    
    /* Menu toggle button */
    .menu-toggle { display: none; position: fixed; top: 10px; left: 10px; z-index: 1100; }
    
    /* Table responsive adjustments */
    .table-responsive { overflow-x: auto; }
    
    /* Smooth highlight for new messages */
    .table-success { animation: highlight 2s ease; }
    @keyframes highlight {
      0% { background-color: #d4edda; }
      100% { background-color: transparent; }
    }

    /* Mobile optimizations */
    @media (max-width: 576px) {
      .content { padding: 15px 10px; }
      h2 { font-size: 1.5rem; }
      .card-body { padding: 1rem; }
      .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.75rem; }
      .table td, .table th { padding: 0.5rem; }
    }
  </style>
</head>
<body>

  <!-- Menu Toggle Button (Mobile Only) -->
  <button class="btn btn-primary menu-toggle" id="menuToggle">
    <i class="bi bi-list"></i>
  </button>

  <!-- Sidebar -->
  <div class="sidebar d-flex flex-column p-3" id="sidebar">
    <h4 class="text-white mb-4">‚öôÔ∏è Admin Panel</h4>
    <ul class="nav nav-pills flex-column mb-auto">
      <li><a href="#users" class="nav-link active" data-bs-toggle="tab"><i class="bi bi-people"></i> <span>Users</span></a></li>
      <li><a href="#products" class="nav-link" data-bs-toggle="tab"><i class="bi bi-box-seam"></i> <span>Products</span></a></li>
      <li><a href="#loans" class="nav-link" data-bs-toggle="tab"><i class="bi bi-cash-stack"></i> <span>Loans</span></a></li>
      <li><a href="#content" class="nav-link" data-bs-toggle="tab"><i class="bi bi-layout-text-sidebar"></i> <span>Banner-Content</span></a></li>
      <li><a href="#leaderboard" class="nav-link" data-bs-toggle="tab"><i class="bi bi-trophy"></i> <span>Leaderboard</span></a></li>
      <li><a href="#bookings" class="nav-link" data-bs-toggle="tab"><i class="bi bi-calendar-check"></i> <span>Bookings</span></a></li>
      <li><a href="#messages-tab" class="nav-link" data-bs-toggle="tab"><i class="bi bi-chat-dots"></i> <span>Messages</span></a></li>
    </ul>
    <hr />
    <a href="/home" class="btn btn-sm btn-danger w-100"><i class="bi bi-box-arrow-right"></i> <span>Logout</span></a>
  </div>

  <!-- Main Content -->
  <div class="content" id="mainContent">
    <div class="tab-content">

      <!-- USERS TAB -->
      <div class="tab-pane fade show active" id="users">
        <h2 class="mb-4">üë• Manage Users</h2>
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead class="table-dark">
              <tr><th>ID</th><th>Name</th><th>Email</th><th>Role</th><th>Status</th><th>Created</th><th class="text-end">Actions</th></tr>
            </thead>
            <tbody id="users-table-body">
              <tr><td colspan="7" class="text-center">Loading users...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- PRODUCTS TAB -->
      <div class="tab-pane fade" id="products">
        <h2 class="mb-4">üì¶ Manage Products</h2>
        <div class="card mb-4">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Add New Product</h5>
          </div>
          <div class="card-body">
            <form id="addProductForm" action="/admin/products" method="POST" enctype="multipart/form-data">
              <div class="row g-3">
                <div class="col-md-4">
                  <label class="form-label">Product Title</label>
                  <input type="text" name="title" class="form-control" placeholder="Product Title" required>
                </div>
                <div class="col-md-2">
                  <label class="form-label">Market Price</label>
                  <input type="number" name="marketPrice" class="form-control" placeholder="Market Price" required>
                </div>
                <div class="col-md-2">
                  <label class="form-label">Sale Price</label>
                  <input type="number" name="salePrice" class="form-control" placeholder="Sale Price" required>
                </div>
                <div class="col-md-4">
                  <label class="form-label">Description</label>
                  <input type="text" name="description" class="form-control" placeholder="Description" required>
                </div>
                <div class="col-md-4">
                  <label class="form-label">Product Image</label>
                  <input type="file" name="image" class="form-control" accept="image/*" required>
                </div>
                <div class="col-md-2">
                  <div class="form-check mt-4 pt-2">
                    <input class="form-check-input" type="checkbox" name="onSale" id="onSaleCheck" />
                    <label class="form-check-label" for="onSaleCheck">On Sale</label>
                  </div>
                </div>
                <div class="col-md-2">
                  <button type="submit" class="btn btn-success mt-3 w-100"><i class="bi bi-check2-circle"></i> Add Product</button>
                </div>
              </div>
            </form>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-striped table-hover" id="productsTable">
            <thead class="table-dark">
              <tr><th>ID</th><th>Title</th><th>Market Price</th><th>Sale Price</th><th>Description</th><th>On Sale</th><th>Image</th><th class="text-end">Actions</th></tr>
            </thead>
            <tbody>
              <tr><td colspan="8" class="text-center">Loading products...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- LOANS TAB -->
      <div class="tab-pane fade" id="loans">
        <h2 class="mb-4">üí∞ Manage Loans</h2>
        <div class="table-responsive">
          <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
              <tr>
                <th>#</th>
                <th>Image</th>
                <th>Description</th>
                <th>Value</th>
                <th>Requested</th>
                <th>Months</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="adminLoanTable">
              <tr><td colspan="8" class="text-center">Loading loans...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- BANNER-CONTENT TAB -->
      <div class="tab-pane fade" id="content">
        <h2 class="mb-4">üì¢ Manage Top Bar Messages</h2>
        <div class="card mb-4">
          <div class="card-header bg-info text-white">
            <h5 class="mb-0">Add/Edit Message</h5>
          </div>
          <div class="card-body">
            <form id="topBarForm" class="row g-3 align-items-end">
              <input type="hidden" id="topBarId" />
              <div class="col-md-5">
                <label class="form-label">Message Content</label>
                <input type="text" id="topBarContent" class="form-control" placeholder="Message content" required>
              </div>
              <div class="col-md-2">
                <label class="form-label">Order</label>
                <input type="number" id="topBarOrder" class="form-control" placeholder="Order" required>
              </div>
              <div class="col-md-2">
                <label class="form-label">Status</label>
                <select id="topBarActive" class="form-select">
                  <option value="true">Active</option>
                  <option value="false">Inactive</option>
                </select>
              </div>
              <div class="col-md-3">
                <button type="submit" class="btn btn-success w-100">Save Message</button>
              </div>
            </form>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-striped table-dark" id="topBarTable">
            <thead><tr><th>Order</th><th>Content</th><th>Status</th><th>Actions</th></tr></thead>
            <tbody>
              <tr><td colspan="4" class="text-center">Loading messages...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- LEADERboard TAB -->
      <div class="tab-pane fade" id="leaderboard">
        <h2 class="mb-4">üèÜ Manage Leaderboard</h2>
        <div class="card mb-4">
          <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">Add New Player</h5>
          </div>
          <div class="card-body">
            <form id="addLeaderboardForm" class="row g-3 align-items-end">
              <div class="col-md-5">
                <label class="form-label">Player Name</label>
                <input type="text" name="player" class="form-control" placeholder="Player Name" required />
              </div>
              <div class="col-md-3">
                <label class="form-label">Score</label>
                <input type="number" name="score" class="form-control" placeholder="Score" required />
              </div>
              <div class="col-md-4">
                <button type="submit" class="btn btn-success w-100">
                  <i class="bi bi-plus-circle"></i> Add Player
                </button>
              </div>
            </form>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-striped table-hover admin-leaderboard leaderboard-table">
            <thead class="table-success">
              <tr>
                <th>Rank</th>
                <th>Player</th>
                <th>Score</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr><td colspan="4" class="text-center">Loading leaderboard...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- BOOKINGS TAB -->
      <div class="tab-pane fade" id="bookings">
        <h2 class="mb-4">üéÆ Manage Game Bookings</h2>
        <div class="table-responsive">
          <table class="table table-striped table-hover align-middle" id="bookingsTable">
            <thead class="table-success">
              <tr>
                <th>ID</th><th>User</th><th>Game</th><th>Console</th><th>Date</th><th>Time Slot</th><th>Status</th><th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr><td colspan="8" class="text-center">Loading bookings...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- MESSAGES TAB -->
      <div class="tab-pane fade" id="messages-tab">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h2 class="mb-0">üí¨ Messages</h2>
          <span class="badge bg-success fs-6" id="new-message-count">0</span>
        </div>
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead class="table-dark">
              <tr>
                <th>#</th>
                <th>Name</th>
                <th>Email</th>
                <th>Message</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="messages-tbody">
              <tr><td colspan="5" class="text-center">Loading messages...</td></tr>
            </tbody>
          </table>
        </div>
      </div>

    </div>
  </div>

  <!-- MODALS -->
  <!-- Edit Product Modal -->
  <div class="modal fade" id="editProductModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <form id="editProductForm" class="modal-content" enctype="multipart/form-data">
        <div class="modal-header">
          <h5 class="modal-title">Edit Product</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" name="id" id="editProductId" />
          <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" name="title" id="editTitle" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Market Price</label>
            <input type="number" name="marketPrice" id="editMarket" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Sale Price</label>
            <input type="number" name="salePrice" id="editSale" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <input type="text" name="description" id="editDescription" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Image</label>
            <input type="file" name="image" id="editImage" class="form-control" />
            <div class="form-text">Leave empty to keep current image</div>
          </div>
          <div class="form-check">
            <input type="checkbox" name="onSale" id="editOnSale" class="form-check-input" />
            <label class="form-check-label" for="editOnSale">On Sale</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">Save Changes</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Leaderboard Modal -->
  <div class="modal fade" id="editLeaderboardModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <form id="editLeaderboardForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Player</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editLeaderboardId" />
          <div class="mb-3">
            <label class="form-label">Player Name</label>
            <input type="text" id="editPlayer" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Score</label>
            <input type="number" id="editScore" class="form-control" required />
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">Save Changes</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Reply Modal -->
  <div class="modal fade" id="replyModal" tabindex="-1" aria-labelledby="replyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="replyModalLabel">Reply to Message</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <form id="reply-form">
            <div class="mb-3">
              <label for="reply-text" class="form-label">Reply</label>
              <textarea class="form-control" id="reply-text" rows="4" required></textarea>
            </div>
            <input type="hidden" id="reply-id">
            <button type="submit" class="btn btn-primary">Send Reply</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong id="toast-title" class="me-auto">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body" id="toast-message">
        Operation completed successfully.
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Initialize socket connection
    const socket = io();
    
    // DOM elements
    const menuToggle = document.getElementById('menuToggle');
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('mainContent');
    
    // Toggle sidebar on mobile
    menuToggle.addEventListener('click', () => {
      sidebar.classList.toggle('show');
    });
    
    // Close sidebar when clicking outside on mobile
    document.addEventListener('click', (e) => {
      if (window.innerWidth < 768 && 
          !sidebar.contains(e.target) && 
          !menuToggle.contains(e.target) &&
          sidebar.classList.contains('show')) {
        sidebar.classList.remove('show');
      }
    });

    // ===== USERS TAB =====
    const UsersManager = (() => {
      // Current admin ID (would normally come from server-side session)
      const ADMIN_ID = 'current-admin-id';
      
      // DOM elements
      const usersTableBody = document.getElementById('users-table-body');
      
      // Toast notification
      const toastEl = document.getElementById('liveToast');
      const toastTitle = document.getElementById('toast-title');
      const toastMessage = document.getElementById('toast-message');
      const toast = new bootstrap.Toast(toastEl);
      
      // Show notification
      function showNotification(title, message, type = 'success') {
        toastTitle.textContent = title;
        toastMessage.textContent = message;
        toastEl.className = `toast ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}`;
        toast.show();
      }
      
      // Format date
      function formatDate(dateString) {
        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        return new Date(dateString).toLocaleDateString(undefined, options);
      }
      
      // Load users from server
      async function loadUsers() {
        try {
          const res = await fetch('/admin/users/json');
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          const users = await res.json();
          
          if (!users.length) {
            usersTableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">No users found</td></tr>';
            return;
          }
          
          renderUsers(users);
        } catch (err) {
          console.error('Error loading users:', err);
          usersTableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-danger">Error loading users</td></tr>';
        }
      }
      
      // Render users table
      function renderUsers(users) {
        usersTableBody.innerHTML = users.map(user => {
          const role = user.role || 'user';
          const active = user.active ?? true;
          const createdAt = user.createdAt ? formatDate(user.createdAt) : 'N/A';
          
          return `
          <tr id="user-${user._id}">
            <td>${user._id.substring(user._id.length - 6)}</td>
            <td>${user.name}</td>
            <td>${user.email}</td>
            <td><span class="badge ${role === 'admin' ? 'bg-danger' : 'bg-primary'}">${role}</span></td>
            <td><span class="badge ${active ? 'bg-success' : 'bg-secondary'}">${active ? 'Active' : 'Suspended'}</span></td>
            <td>${createdAt}</td>
            <td class="text-end">
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-dark dropdown-toggle" data-bs-toggle="dropdown">Actions</button>
                <ul class="dropdown-menu dropdown-menu-end">
                  <li><a class="dropdown-item" href="/admin/users/edit/${user._id}"><i class="bi bi-pencil"></i> Edit</a></li>
                  <li><button class="dropdown-item toggle-status-btn" data-id="${user._id}">
                    <i class="bi ${active ? 'bi-pause' : 'bi-play'}"></i> ${active ? 'Suspend' : 'Activate'}
                  </button></li>
                  <li><button class="dropdown-item toggle-role-btn" data-id="${user._id}">
                    <i class="bi ${role === 'admin' ? 'bi-person-dash' : 'bi-person-plus'}"></i> ${role === 'admin' ? 'Remove Admin' : 'Make Admin'}
                  </button></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><button class="dropdown-item text-danger delete-user-btn" data-id="${user._id}"><i class="bi bi-trash"></i> Delete</button></li>
                </ul>
              </div>
            </td>
          </tr>`;
        }).join('');
        
        // Add event listeners to buttons
        attachEventListeners();
      }
      
      // Attach event listeners to buttons
      function attachEventListeners() {
        // Toggle status buttons
        document.querySelectorAll('.toggle-status-btn').forEach(btn => {
          btn.addEventListener('click', () => handleToggleStatus(btn.dataset.id));
        });
        
        // Toggle role buttons
        document.querySelectorAll('.toggle-role-btn').forEach(btn => {
          btn.addEventListener('click', () => handleToggleRole(btn.dataset.id));
        });
        
        // Delete user buttons
        document.querySelectorAll('.delete-user-btn').forEach(btn => {
          btn.addEventListener('click', () => handleDeleteUser(btn.dataset.id));
        });
      }
      
      // Handle toggle status
      async function handleToggleStatus(userId) {
        if (userId === ADMIN_ID) {
          showNotification('Error', 'Cannot change your own status', 'error');
          return;
        }
        
        try {
          const res = await fetch(`/admin/users/toggle/${userId}`, { method: 'POST' });
          const data = await res.json();
          
          if (data.success) {
            const row = document.querySelector(`#user-${userId}`);
            const badge = row.querySelector('td:nth-child(5) .badge');
            const btn = row.querySelector('.toggle-status-btn');
            
            badge.className = `badge ${data.active ? 'bg-success' : 'bg-secondary'}`;
            badge.textContent = data.active ? 'Active' : 'Suspended';
            btn.innerHTML = `<i class="bi ${data.active ? 'bi-pause' : 'bi-play'}"></i> ${data.active ? 'Suspend' : 'Activate'}`;
            
            showNotification('Success', `User ${data.active ? 'activated' : 'suspended'} successfully`);
          } else {
            showNotification('Error', data.message, 'error');
          }
        } catch (err) {
          console.error('Error toggling user status:', err);
          showNotification('Error', 'Failed to update user status', 'error');
        }
      }
      
      // Handle toggle role
      async function handleToggleRole(userId) {
        if (userId === ADMIN_ID) {
          showNotification('Error', 'Cannot change your own role', 'error');
          return;
        }
        
        try {
          const res = await fetch(`/admin/users/role/${userId}`, { method: 'POST' });
          const data = await res.json();
          
          if (data.success) {
            const row = document.querySelector(`#user-${userId}`);
            const badge = row.querySelector('td:nth-child(4) .badge');
            const btn = row.querySelector('.toggle-role-btn');
            
            badge.className = `badge ${data.role === 'admin' ? 'bg-danger' : 'bg-primary'}`;
            badge.textContent = data.role;
            btn.innerHTML = `<i class="bi ${data.role === 'admin' ? 'bi-person-dash' : 'bi-person-plus'}"></i> ${data.role === 'admin' ? 'Remove Admin' : 'Make Admin'}`;
            
            showNotification('Success', `User role updated to ${data.role}`);
          } else {
            showNotification('Error', data.message, 'error');
          }
        } catch (err) {
          console.error('Error toggling user role:', err);
          showNotification('Error', 'Failed to update user role', 'error');
        }
      }
      
      // Handle delete user
      async function handleDeleteUser(userId) {
        if (userId === ADMIN_ID) {
          showNotification('Error', 'Cannot delete your own account', 'error');
          return;
        }
        
        if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
          return;
        }
        
        try {
          const res = await fetch(`/admin/users/delete/${userId}`, { method: 'POST' });
          const data = await res.json();
          
          if (data.success) {
            document.querySelector(`#user-${userId}`).remove();
            showNotification('Success', 'User deleted successfully');
          } else {
            showNotification('Error', data.message || 'Failed to delete user', 'error');
          }
        } catch (err) {
          console.error('Error deleting user:', err);
          showNotification('Error', 'Failed to delete user', 'error');
        }
      }
      
      // Public methods
      return {
        init: function() {
          loadUsers();
        }
      };
    })();
    
    // Initialize the users manager when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      UsersManager.init();
    });

    // ================== PRODUCTS TAB ==================
    const editProductModal = new bootstrap.Modal(document.getElementById('editProductModal'));
    const productsTableBody = document.querySelector('#productsTable tbody');

    // ----------------- Load Products -----------------
    async function loadProducts() {
      try {
        const res = await fetch('/admin/products/json');
        const products = await res.json();

        if (!products.length) {
          productsTableBody.innerHTML = '<tr><td colspan="8" class="text-center">No products found</td></tr>';
          return;
        }

        productsTableBody.innerHTML = products.map(p => `
          <tr id="product-${p._id}">
            <td>${p._id}</td>
            <td>${p.title}</td>
            <td><span class="text-decoration-line-through text-danger">${p.marketPrice}</span></td>
            <td>${p.salePrice}</td>
            <td>${p.description}</td>
            <td>${p.onSale ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>'}</td>
            <td><img src="${p.image || '/images/placeholder.png'}" width="50" height="50" class="thumb" alt="${p.title}"></td>
            <td class="text-end">
              <button class="btn btn-sm btn-primary edit-product-btn me-1"
                      data-id="${p._id}"
                      data-title="${p.title}"
                      data-market="${p.marketPrice}"
                      data-sale="${p.salePrice}"
                      data-description="${p.description}"
                      data-onsale="${p.onSale}">
                <i class="bi bi-pencil"></i> Edit
              </button>
              <button class="btn btn-sm btn-danger delete-product-btn" data-id="${p._id}">
                <i class="bi bi-trash"></i> Delete
              </button>
            </td>
          </tr>
        `).join('');

        attachProductEventListeners();
      } catch (err) {
        console.error('Error loading products:', err);
        productsTableBody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Error loading products</td></tr>';
      }
    }

    // ----------------- Attach Edit/Delete Buttons -----------------
    function attachProductEventListeners() {
      // Edit buttons
      document.querySelectorAll('.edit-product-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          document.getElementById('editProductId').value = btn.dataset.id;
          document.getElementById('editTitle').value = btn.dataset.title;
          document.getElementById('editMarket').value = btn.dataset.market;
          document.getElementById('editSale').value = btn.dataset.sale;
          document.getElementById('editDescription').value = btn.dataset.description;
          document.getElementById('editOnSale').checked = btn.dataset.onsale === 'true';
          editProductModal.show();
        });
      });

      // Delete buttons
      document.querySelectorAll('.delete-product-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          if (!confirm('Are you sure you want to delete this product?')) return;

          try {
            const res = await fetch(`/admin/products/delete/${btn.dataset.id}`, { method: 'POST' });
            if (res.ok) {
              loadProducts();
              alert('Product deleted successfully');
            } else {
              alert('Failed to delete product');
            }
          } catch (err) {
            console.error('Error deleting product:', err);
            alert('Failed to delete product');
          }
        });
      });
    }

    // ----------------- Add Product -----------------
    document.getElementById('addProductForm').addEventListener('submit', async e => {
      e.preventDefault();
      const formData = new FormData(e.target);

      try {
        const res = await fetch('/admin/products', {
          method: 'POST',
          body: formData
        });

        if (res.ok) {
          e.target.reset();
          loadProducts();
          alert('Product added successfully');
        } else {
          const err = await res.json();
          alert('Failed to add product: ' + (err.message || res.statusText));
        }
      } catch (err) {
        console.error('Error adding product:', err);
        alert('Failed to add product');
      }
    });

    // ----------------- Edit Product -----------------
    document.getElementById('editProductForm').addEventListener('submit', async e => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const productId = document.getElementById('editProductId').value;

      try {
        const res = await fetch(`/admin/products/edit/${productId}`, {
          method: 'POST',
          body: formData
        });

        if (res.ok) {
          editProductModal.hide();
          loadProducts();
          alert('Product updated successfully');
        } else {
          const err = await res.json();
          alert('Failed to update product: ' + (err.message || res.statusText));
        }
      } catch (err) {
        console.error('Error updating product:', err);
        alert('Failed to update product');
      }
    });

    // ----------------- Initial Load -----------------
    document.addEventListener('DOMContentLoaded', loadProducts);

    // ===== LOANS TAB =====
    const adminLoanTable = document.getElementById("adminLoanTable");

    // Render one loan row
    function renderAdminLoanRow(loan) {
      return `
        <tr id="loan-${loan._id}">
          <td>${loan._id.slice(-4)}</td>
          <td>${loan.itemImage ? `<img src="/uploads/${loan.itemImage}" width="60" class="rounded">` : "‚Äî"}</td>
          <td>${loan.description}</td>
          <td>Ksh ${loan.itemValue}</td>
          <td>Ksh ${loan.loanAmount}</td>
          <td>${loan.loanPeriod} months</td>
          <td class="loan-status">
            <span class="badge ${
              loan.status === "Approved"
                ? "bg-success"
                : loan.status === "Rejected"
                ? "bg-danger"
                : loan.status === "Visit Shop"
                ? "bg-info"
                : "bg-warning"
            }">
              ${loan.status}
            </span>
          </td>
          <td>
            <button class="btn btn-success btn-sm me-1" onclick="updateLoan('${loan._id}','Approved')">Approve</button>
            <button class="btn btn-info btn-sm me-1" onclick="updateLoan('${loan._id}','Visit Shop')">Visit Shop</button>
            <button class="btn btn-danger btn-sm" onclick="updateLoan('${loan._id}','Rejected')">Reject</button>
          </td>
        </tr>
      `;
    }

    // Load loans initially
    async function loadAdminLoans() {
      try {
        const res = await fetch("/admin/loans/json");
        const loans = await res.json();

        if (!loans.length) {
          adminLoanTable.innerHTML =
            '<tr><td colspan="8" class="text-center">No loans yet</td></tr>';
          return;
        }

        adminLoanTable.innerHTML = loans.map(renderAdminLoanRow).join("");
      } catch (error) {
        console.error("Error loading loans:", error);
        adminLoanTable.innerHTML =
          '<tr><td colspan="8" class="text-center text-danger">Error loading loans</td></tr>';
      }
    }

    // Admin updates loan status
    async function updateLoan(id, status) {
      try {
        const res = await fetch(`/admin/loans/${id}/status`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ status }),
        });

        const data = await res.json();
        if (data.success) {
          loadAdminLoans(); // Reload to see the updated status
        } else {
          alert("‚ùå Failed to update loan status");
        }
      } catch (error) {
        console.error("Error updating loan:", error);
        alert("Failed to update loan status");
      }
    }

    // Real-time: new loan added
    socket.on("loanCreated", (loan) => {
      if (!document.getElementById(`loan-${loan._id}`)) {
        adminLoanTable.innerHTML =
          renderAdminLoanRow(loan) + adminLoanTable.innerHTML; // prepend newest
      }
    });

    // Real-time: loan updated
    socket.on("loanUpdated", (loan) => {
      const row = document.getElementById(`loan-${loan._id}`);
      if (row) {
        row.outerHTML = renderAdminLoanRow(loan);
      } else {
        loadAdminLoans(); // fallback if row not present
      }
    });

    // ===== TOP BAR =====
    async function loadTopBar() {
      try {
        const res = await fetch('/admin/top-bar/json');
        const data = await res.json();
        const tbody = document.querySelector('#topBarTable tbody');
        
        if (!data.length) {
          tbody.innerHTML = '<tr><td colspan="4" class="text-center">No messages found</td></tr>';
          return;
        }
        
        tbody.innerHTML = data.map(msg => `
          <tr>
            <td>${msg.order}</td>
            <td>${msg.content}</td>
            <td>${msg.active ? '‚úÖ Active' : '‚ùå Inactive'}</td>
            <td>
              <button class="btn btn-sm btn-primary edit-topbar-btn me-1" data-id="${msg._id}">Edit</button>
              <button class="btn btn-sm btn-danger delete-topbar-btn" data-id="${msg._id}">Delete</button>
            </td>
          </tr>
        `).join('');
        
        // Edit handler
        document.querySelectorAll('.edit-topbar-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const msg = data.find(m => m._id === btn.dataset.id);
            document.getElementById('topBarId').value = msg._id;
            document.getElementById('topBarContent').value = msg.content;
            document.getElementById('topBarOrder').value = msg.order;
            document.getElementById('topBarActive').value = msg.active;
          });
        });
        
        // Delete handler
        document.querySelectorAll('.delete-topbar-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            if (confirm('Are you sure you want to delete this message?')) {
              try {
                await fetch(`/admin/top-bar/${btn.dataset.id}`, { method: 'DELETE' });
                loadTopBar();
              } catch (error) {
                console.error('Error deleting message:', error);
                alert('Failed to delete message');
              }
            }
          });
        });
      } catch (error) {
        console.error('Error loading top bar messages:', error);
        document.querySelector('#topBarTable tbody').innerHTML = 
          '<tr><td colspan="4" class="text-center text-danger">Error loading messages</td></tr>';
      }
    }

    // Handle form submission
    document.getElementById('topBarForm').addEventListener('submit', async e => {
      e.preventDefault();
      
      try {
        await fetch('/admin/top-bar', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: document.getElementById('topBarId').value,
            content: document.getElementById('topBarContent').value,
            order: parseInt(document.getElementById('topBarOrder').value),
            active: document.getElementById('topBarActive').value === 'true'
          })
        });
        
        e.target.reset();
        document.getElementById('topBarId').value = '';
        loadTopBar();
      } catch (error) {
        console.error('Error saving top bar message:', error);
        alert('Failed to save message');
      }
    });

    // ‚úÖ Listen to socket for real-time refresh
    socket.on("topBarUpdated", () => {
      loadTopBar();
    });

    // ===== LEADERBOARD (ADMIN) =====
    const lbTbody = document.querySelector('.admin-leaderboard tbody');
    const editLbModal = new bootstrap.Modal(document.getElementById('editLeaderboardModal'));
    
    function placeRowGlowClass(tr, index) {
      tr.classList.remove('glow-gold', 'glow-silver', 'glow-bronze');
      if (index === 0) tr.classList.add('glow-gold');
      else if (index === 1) tr.classList.add('glow-silver');
      else if (index === 2) tr.classList.add('glow-bronze');
    }
    
    function renderRankBadge(i) {
      if (i === 0) return 'ü•á 1';
      if (i === 1) return 'ü•à 2';
      if (i === 2) return 'ü•â 3';
      return i + 1;
    }
    
    async function renderLeaderboard() {
      try {
        const res = await fetch('/top-leaderboard');
        const leaderboard = await res.json();
        
        if (!leaderboard.length) {
          lbTbody.innerHTML = '<tr><td colspan="4" class="text-center">No players yet</td></tr>';
          return;
        }
        
        lbTbody.innerHTML = '';
        
        leaderboard.forEach((p, i) => {
          const tr = document.createElement('tr');
          tr.id = `leaderboard-${p._id}`;
          placeRowGlowClass(tr, i);
          tr.innerHTML = `
            <td>${renderRankBadge(i)}</td>
            <td>${p.player}</td>
            <td>${p.score}</td>
            <td class="text-end">
              <button class="btn btn-sm btn-primary edit-leaderboard-btn me-1"
                      data-id="${p._id}" data-player="${p.player}" data-score="${p.score}">
                <i class="bi bi-pencil"></i> Edit
              </button>
              <button class="btn btn-sm btn-danger delete-leaderboard-btn" data-id="${p._id}">
                <i class="bi bi-trash"></i> Delete
              </button>
            </td>`;
          lbTbody.appendChild(tr);
        });
        
        bindLeaderboardButtons();
      } catch (err) {
        console.error('Error loading leaderboard:', err);
        lbTbody.innerHTML = '<tr><td colspan="4" class="text-center text-danger">Error loading leaderboard</td></tr>';
      }
    }
    
    function bindLeaderboardButtons() {
      document.querySelectorAll('.edit-leaderboard-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          document.getElementById('editLeaderboardId').value = btn.dataset.id;
          document.getElementById('editPlayer').value = btn.dataset.player;
          document.getElementById('editScore').value = btn.dataset.score;
          editLbModal.show();
        });
      });
      
      document.querySelectorAll('.delete-leaderboard-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          const id = btn.dataset.id;
          if (!confirm('Are you sure you want to delete this player?')) return;
          
          try {
            await fetch(`/admin/leaderboard/${id}`, { method: 'DELETE' });
            socket.emit('leaderboardUpdate');
          } catch (error) {
            console.error('Error deleting player:', error);
            alert('Failed to delete player');
          }
        });
      });
    }
    
    // Add leaderboard form submission
    document.getElementById('addLeaderboardForm').addEventListener('submit', async e => {
      e.preventDefault();
      const fd = new FormData(e.target);
      const player = fd.get('player');
      const score = Number(fd.get('score'));
      
      try {
        const res = await fetch('/admin/leaderboard', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ player, score })
        });
        
        const data = await res.json();
        if (data.success) {
          e.target.reset();
          socket.emit('leaderboardUpdate');
        } else {
          alert('Failed to add player');
        }
      } catch (err) { 
        console.error('Error adding player:', err);
        alert('Failed to add player');
      }
    });
    
    // Edit leaderboard form submission
    document.getElementById('editLeaderboardForm').addEventListener('submit', async e => {
      e.preventDefault();
      const id = document.getElementById('editLeaderboardId').value;
      const player = document.getElementById('editPlayer').value;
      const score = Number(document.getElementById('editScore').value);
      
      try {
        const res = await fetch(`/admin/leaderboard/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ player, score })
        });
        
        const data = await res.json();
        if (data.success) {
          editLbModal.hide();
          socket.emit('leaderboardUpdate');
        } else {
          alert('Failed to update player');
        }
      } catch (err) { 
        console.error('Error updating player:', err);
        alert('Failed to update player');
      }
    });
    
    // ===== BOOKINGS =====
    const bookingsTbody = document.querySelector('#bookingsTable tbody');
    
    function renderBookingRow(b, isNew = false) {
      const badgeClass = b.status === 'Pending' ? 'warning'
                        : b.status === 'Confirmed' ? 'success'
                        : b.status === 'Completed' ? 'primary'
                        : 'secondary';
      let row = document.getElementById(`booking-${b._id}`);
      
      if (row) {
        row.querySelector('td:nth-child(3)').textContent = b.game;
        row.querySelector('td:nth-child(4)').textContent = b.console;
        row.querySelector('td:nth-child(5)').textContent = new Date(b.date).toLocaleDateString();
        row.querySelector('td:nth-child(6)').textContent = b.timeSlot;
        const statusSpan = row.querySelector('td:nth-child(7) span');
        statusSpan.textContent = b.status;
        statusSpan.className = `badge bg-${badgeClass}`;
        row.classList.add('updated');
        setTimeout(() => row.classList.remove('updated'), 3000);
      } else {
        row = document.createElement('tr');
        row.id = `booking-${b._id}`;
        if (isNew) row.classList.add('new-booking');
        row.innerHTML = `
          <td>${b._id}</td>
          <td>${b.user.name} (${b.user.email})</td>
          <td>${b.game}</td>
          <td>${b.console}</td>
          <td>${new Date(b.date).toLocaleDateString()}</td>
          <td>${b.timeSlot}</td>
          <td><span class="badge bg-${badgeClass}">${b.status}</span></td>
          <td class="text-end">
            <select class="form-select form-select-sm status-select" data-id="${b._id}">
              <option value="Pending"   ${b.status === 'Pending' ? 'selected' : ''}>Pending</option>
              <option value="Confirmed" ${b.status === 'Confirmed' ? 'selected' : ''}>Confirmed</option>
              <option value="Completed" ${b.status === 'Completed' ? 'selected' : ''}>Completed</option>
              <option value="Cancelled" ${b.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
            </select>
          </td>`;
        bookingsTbody.appendChild(row);
        setTimeout(() => row.classList.remove('new-booking'), 3000);
      }
    }
    
    async function fetchBookings() {
      try {
        const res = await fetch('/admin/bookings/json');
        const data = await res.json();
        const bookings = Array.isArray(data) ? data : (data.bookings || []);
        
        if (!bookings.length) {
          bookingsTbody.innerHTML = '<tr><td colspan="8" class="text-center">No bookings found</td></tr>';
          return;
        }
        
        bookingsTbody.innerHTML = '';
        bookings.forEach(b => renderBookingRow(b));
      } catch (error) {
        console.error('Error loading bookings:', error);
        bookingsTbody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Error loading bookings</td></tr>';
      }
    }
    
    // Booking status change handler
    bookingsTbody.addEventListener('change', async e => {
      if (!e.target.classList.contains('status-select')) return;
      const id = e.target.dataset.id, status = e.target.value;
      
      try {
        const res = await fetch(`/admin/bookings/update/${id}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status })
        });
        
        const data = await res.json();
        if (data.success) {
          renderBookingRow(data.booking);
        } else {
          alert('Failed to update booking status');
        }
      } catch (error) {
        console.error('Error updating booking:', error);
        alert('Failed to update booking status');
      }
    });
    
    // ===== MESSAGES TAB =====
    const messagesTbody = document.getElementById("messages-tbody");
    const newMessageCount = document.getElementById("new-message-count");
    const replyModal = new bootstrap.Modal(document.getElementById("replyModal"));
    const replyForm = document.getElementById("reply-form");
    const replyText = document.getElementById("reply-text");
    const replyId = document.getElementById("reply-id");

    let messages = [];

    // Fetch & render messages
    async function loadMessages() {
      try {
        const res = await fetch("/admin/messages/json");
        messages = await res.json();
        renderMessages();
      } catch (error) {
        console.error("Error loading messages:", error);
        messagesTbody.innerHTML =
          '<tr><td colspan="5" class="text-center text-danger">Error loading messages</td></tr>';
      }
    }

    function renderMessages() {
      messagesTbody.innerHTML = "";

      if (!messages.length) {
        messagesTbody.innerHTML =
          '<tr><td colspan="5" class="text-center">No messages yet</td></tr>';
        newMessageCount.textContent = "0";
        return;
      }

      messages.forEach((msg, i) => {
        const tr = document.createElement("tr");
        tr.id = `message-${msg._id}`;
        tr.innerHTML = `
          <td>${i + 1}</td>
          <td>${msg.name}</td>
          <td>${msg.email}</td>
          <td>${msg.text}</td>
          <td>
            <button class="btn btn-sm btn-success reply-btn me-1" data-id="${msg._id}">Reply</button>
            <button class="btn btn-sm btn-danger delete-btn" data-id="${msg._id}">Delete</button>
          </td>
        `;
        messagesTbody.appendChild(tr);
      });

      newMessageCount.textContent = messages.length;
    }

    // Real-time new message handling
    socket.on("new-message", (msg) => {
      messages.push(msg);
      const tr = document.createElement("tr");
      tr.id = `message-${msg._id}`;
      tr.innerHTML = `
        <td>${messages.length}</td>
        <td>${msg.name}</td>
        <td>${msg.email}</td>
        <td>${msg.text}</td>
        <td>
          <button class="btn btn-sm btn-success reply-btn me-1" data-id="${msg._id}">Reply</button>
          <button class="btn btn-sm btn-danger delete-btn" data-id="${msg._id}">Delete</button>
        </td>
      `;
      messagesTbody.appendChild(tr);

      // Smooth highlight
      tr.classList.add("table-success");
      setTimeout(() => tr.classList.remove("table-success"), 2000);

      newMessageCount.textContent = messages.length;
    });

    // Reply + Delete handling
    messagesTbody.addEventListener("click", (e) => {
      if (e.target.classList.contains("reply-btn")) {
        const id = e.target.dataset.id;
        replyId.value = id;
        replyText.value = "";
        replyModal.show();
        setTimeout(() => replyText.focus(), 300);
      }

      if (e.target.classList.contains("delete-btn")) {
        const id = e.target.dataset.id;
        if (confirm("Are you sure you want to delete this message?")) {
          fetch(`/admin/messages/${id}`, { method: "DELETE" })
            .then(() => {
              messages = messages.filter((m) => m._id !== id);
              renderMessages();
            })
            .catch((error) => {
              console.error("Error deleting message:", error);
              alert("Failed to delete message");
            });
        }
      }
    });

    // Reply form submit
    replyForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const id = replyId.value;
      const text = replyText.value;

      try {
        await fetch(`/admin/messages/reply/${id}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ reply: text }),
        });

        replyModal.hide();
        alert("Reply sent!");
      } catch (error) {
        console.error("Error sending reply:", error);
        alert("Failed to send reply");
      }
    });

    // ===== INITIAL LOAD =====
    document.addEventListener('DOMContentLoaded', () => {
      // Load data for the active tab
      const activeTab = document.querySelector('.tab-pane.active');
      if (activeTab) {
        if (activeTab.id === 'users') UsersManager.init();
        if (activeTab.id === 'products') loadProducts();
        if (activeTab.id === 'loans') loadAdminLoans();
        if (activeTab.id === 'content') loadTopBar();
        if (activeTab.id === 'leaderboard') renderLeaderboard();
        if (activeTab.id === 'bookings') fetchBookings();
        if (activeTab.id === 'messages-tab') loadMessages();
      }
      
      // Listen for tab changes to load data
      document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
        tab.addEventListener('shown.bs.tab', e => {
          const targetId = e.target.getAttribute('href').substring(1);
          if (targetId === 'users') UsersManager.init();
          if (targetId === 'products') loadProducts();
          if (targetId === 'loans') loadAdminLoans();
          if (targetId === 'content') loadTopBar();
          if (targetId === 'leaderboard') renderLeaderboard();
          if (targetId === 'bookings') fetchBookings();
          if (targetId === 'messages-tab') loadMessages();
        });
      });
    });
    
    // Real-time updates
    socket.on('topBarUpdate', loadTopBar);
    socket.on('leaderboardUpdate', renderLeaderboard);
    socket.on('newBooking', b => renderBookingRow(b, true));
    socket.on('updateBooking', b => renderBookingRow(b));
  </script>
</body>
</html>