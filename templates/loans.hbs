<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Loan Application | Maximum Gamers</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <style>
    body { background-color: #f5f7fa; font-family: "Poppins", sans-serif; }
    .card { border-radius: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); }
    .navbar-brand { font-weight: 600; letter-spacing: 0.5px; }
    .form-control, .form-select { border-radius: 10px; }
    .preview-img { width: 100%; max-width: 180px; margin-top: 10px; display: none; border-radius: 10px; }
    .loan-table th { background-color: #343a40; color: white; }
    .status-badge { font-size: 0.9rem; border-radius: 10px; padding: 5px 10px; }
    .highlight { background-color: #d1ffd1 !important; transition: background-color 1s ease; }
  </style>
</head>
<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/user">Maximum Gamers</a>
      <div>
        <a href="/logout" class="btn btn-danger btn-sm">Logout</a>
      </div>
    </div>
  </nav>

  <!-- MAIN CONTAINER -->
  <div class="container my-5">
    <div class="row g-4">
      <!-- Loan Application Form -->
      <div class="col-lg-5">
        <div class="card p-4">
          <h4 class="text-center mb-3">Apply for a Loan</h4>
          <div id="flashMessage"></div>
          <form id="loanForm" action="/loans" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="item" class="form-label">Item for Loan</label>
              <input type="text" class="form-control" id="item" name="item" placeholder="e.g., PlayStation 5, Controller" required />
            </div>
            <div class="mb-3">
              <label for="amount" class="form-label">Loan Amount (KSH)</label>
              <input type="number" class="form-control" id="amount" name="loanAmount" min="100" required />
            </div>
            <div class="mb-3">
              <label for="image" class="form-label">Upload Item Image</label>
              <input type="file" class="form-control" id="image" name="itemImage" accept="image/*" required />
              <img id="imagePreview" class="preview-img" alt="Preview" />
            </div>
            <button type="submit" class="btn btn-primary w-100">
              <i class="fa-solid fa-paper-plane me-2"></i> Submit Application
            </button>
          </form>
        </div>
      </div>

      <!-- Loan Records -->
      <div class="col-lg-7">
        <div class="card p-4">
          <h4 class="text-center mb-3">Your Loan Requests</h4>
          <div class="table-responsive">
            <table class="table table-bordered loan-table align-middle text-center">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Item</th>
                  <th>Amount</th>
                  <th>Status</th>
                  <th>Date</th>
                </tr>
              </thead>
              <tbody id="loanList">
                <!-- Filled dynamically -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- SOCKET.IO -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // === Image Preview ===
    const imageInput = document.getElementById("image");
    const imagePreview = document.getElementById("imagePreview");
    imageInput.addEventListener("change", () => {
      const file = imageInput.files[0];
      if (file) {
        imagePreview.src = URL.createObjectURL(file);
        imagePreview.style.display = "block";
      } else {
        imagePreview.style.display = "none";
      }
    });

    // === Load Loans ===
    async function loadLoans() {
      try {
        const res = await fetch("/loans/list");
        if (!res.ok) return;
        const loans = await res.json();
        const tbody = document.getElementById("loanList");
        tbody.innerHTML = loans
          .map((loan, index) => `
            <tr data-id="${loan._id}">
              <td>${index + 1}</td>
              <td>${loan.item}</td>
              <td>KSH ${loan.loanAmount.toLocaleString()}</td>
              <td>
                <span class="status-badge badge ${
                  loan.status === "Approved"
                    ? "bg-success"
                    : loan.status === "Rejected"
                    ? "bg-danger"
                    : "bg-warning text-dark"
                }">${loan.status}</span>
              </td>
              <td>${new Date(loan.createdAt).toLocaleDateString()}</td>
            </tr>
          `).join("");
      } catch (err) {
        console.error("Error loading loans:", err);
      }
    }

    loadLoans();

    // === Real-Time Loan Creation ===
    const loanForm = document.getElementById("loanForm");
    loanForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(loanForm);
      try {
        const res = await fetch("/loans", { method: "POST", body: formData });
        if (!res.ok) throw new Error("Failed to submit loan");
        const data = await res.json();
        const loan = data.loan;

        // Emit to socket (optional if backend already emits)
        socket.emit("loanCreated", loan);

        // Reset form
        loanForm.reset();
        imagePreview.style.display = "none";
      } catch (err) {
        console.error(err);
        alert(err.message);
      }
    });

    // === Receive new loan in real-time ===
    socket.on("loanCreated", (loan) => {
      const tbody = document.getElementById("loanList");
      const row = document.createElement("tr");
      row.dataset.id = loan._id;
      row.innerHTML = `
        <td>${tbody.children.length + 1}</td>
        <td>${loan.item}</td>
        <td>KSH ${loan.loanAmount.toLocaleString()}</td>
        <td><span class="status-badge badge bg-warning text-dark">${loan.status}</span></td>
        <td>${new Date(loan.createdAt).toLocaleDateString()}</td>
      `;
      tbody.prepend(row);
      row.classList.add("highlight");
      setTimeout(() => row.classList.remove("highlight"), 2000);
    });
  </script>
</body>
</html>
